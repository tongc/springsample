spring:
profiles: production
logging:
file: logs/production_app.log
pattern:
level:
org.springframework.web: WARN
guru.springframework.controllers: WARN
org.hibernate: WARN

togglz:
  enabled: true # Enable Togglz for the application.
  console:
    enabled: true # Enable admin console.
    path: /togglz-console # The path of the admin console when enabled.
    feature-admin-authority: ROLE_ADMIN # The name of the authority that is allowed to access the admin console.
    secured: true # Indicates if the admin console runs in secured mode. If false the application itself should take care of securing the admin console.
  feature-enums: # Comma-separated list of fully-qualified feature enum class names.
  feature-manager-name: # The name of the feature manager.
  features: # The feature states. Only needed if feature states are stored in application properties.
    HELLO_WORLD: true
    REVERSE_GREETING: true
    REVERSE_GREETING.strategy: username
    REVERSE_GREETING.param.users: user2, user3
  features-file: # The path to the features file that contains the feature states. Only needed if feature states are stored in external properties file.
  features-file-min-check-interval: # The minimum amount of time in milliseconds to wait between checks of the file's modification date.
  cache:
    enabled: false # Enable feature state caching.
    time-to-live: 0 # The time after which a cache entry will expire.
    time-unit: milliseconds # The time unit as java.util.concurrent.TimeUnit enum name (one of "nanoseconds", "microseconds", "milliseconds", "seconds", "minutes", "hours", "days").
  endpoint:
    id: togglz # The endpoint identifier.
    enabled: true # Enable actuator endpoint.
    sensitive: true # Indicates if the endpoint exposes sensitive information.
#server.tomcat.accesslog:
#    # Enable access log:
#    enabled: true
#
#    # Directory in which log files are created. Can be relative to the tomcat base dir or absolute:
#    directory: C:/LightroomPortable/
#
#    # Format pattern for access logs:
#    # https://tomcat.apache.org/tomcat-8.0-doc/config/valve.html#Access_Log_Valve
#    pattern: '%h %l %u %t "%r" %s %b %D'
#
#    # Log file name suffix:
#    suffix: .log
# or to debug what's been logged at
#     org.apache.catalina.connector.CoyoteAdapter class
#     public void service(org.apache.coyote.Request req,
#                          org.apache.coyote.Response res)
# inside
#finally {
#  // Access log
#  if (!async && !comet) {
#      if (postParseSuccess) {
#          // Log only if processing was invoked.
#          // If postParseRequest() failed, it has already logged it.
#          // If context is null this was the start of a comet request
#          // that failed and has already been logged.
#          request.getMappingData().context.logAccess(
#                  request, response,
#                  System.currentTimeMillis() - req.getStartTime(),
#                  false);
#      }
#  }
#}
# Access log valve @
# org.apache.catalina.valves.AccessLogValve
#     @Override
#     public void log(CharArrayWriter message)